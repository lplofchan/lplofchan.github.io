<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Leah Plofchan</title>
    <link>https://lplofchan.github.io/project/index.xml</link>
    <description>Recent content in Projects on Leah Plofchan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Leah Plofchan</copyright>
    <lastBuildDate>Sun, 01 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lplofchan.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Graphical Analysis Statistics Program</title>
      <link>https://lplofchan.github.io/project/deep-learning/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lplofchan.github.io/project/deep-learning/</guid>
      <description>&lt;p&gt;This project, titled NDVoters, was my final project for my Fundamentals of
Computing II class in Spring of 2016.  My team and I used QT Creator with C++ to generate an interactive GUI
that allowed the user to view graphs about the political atmosphere at Notre
Dame. Through this project, I learned the necessary skills to combine multiple
lessons from the semester (shell scripting, C++ Object-Oriented Programming,
and the QT Creator IDE) into one project.&lt;/p&gt;

&lt;p&gt;Using a Google form, we polled approximately 200 Notre Dame students on
their opinions for the 2016 election.  We used the data taken from
this poll to create demographic based graphs that allowed the user to interpret
the results more thoroughly.&lt;/p&gt;

&lt;p&gt;The following description explains how the user navigates through the program.  The user is able to view side-by-side graphs about Presidential Primary
voting patterns for different demographics. Upon running the program, the GUI
opens, initially displaying two side-by-side graphs of the total votes for
each candidate. There are drop down menus for each bar of the side-by-side
graph. The user can select different drop downs to change the graphs. For
example, the user could select &amp;ldquo;Female&amp;rdquo; from the gender drop down menu for the
left bar, and then select &amp;ldquo;Male&amp;rdquo; from the gender drop-down menu for the right
bar. After clicking the &amp;ldquo;Create Graph&amp;rdquo; button, the user would see a comparison
of the voting patterns of each gender. The user can change as many dropdowns as
desired to make the graphed voting populations more or less specific. To return
to showing the total overall votes for all voters, the user must simply change
each dropdown back to the default choice (&amp;ldquo;Age&amp;rdquo;, &amp;ldquo;Gender&amp;rdquo;, etc.). At any point,
the user can press the &amp;ldquo;Quit&amp;rdquo; button to close the GUI and exit the program.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Networking Project</title>
      <link>https://lplofchan.github.io/project/passwordcracker/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lplofchan.github.io/project/passwordcracker/</guid>
      <description>&lt;p&gt;As part of a project for my Spring 2016 Basic Unix course, a partner and I
created a program that make an HTTP client and server in Python using sockets
that would communicate through low-level system calls.  Basically, we built a
client that could make requests to a server that we created that was able to
support directory listings, static files, and CGI scripts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Password Cracker</title>
      <link>https://lplofchan.github.io/project/networking/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lplofchan.github.io/project/networking/</guid>
      <description>&lt;p&gt;As part of my UNIX course in the spring of 2016, my fellow peer and I created a
program that could take advantage of the power of multiple machines to crack
more than 10,000 passwords in a reasonable amount of time.  Using Python, we
created a work queue application that coordinated &amp;ldquo;workers&amp;rdquo; running on different
machines to improve the speed of the program.  All of the passwords were decoded
using the MD5 hash system.&lt;/p&gt;

&lt;p&gt;More specifically, this project was completed with the collaboration of two
different Python files.  The first was the basic brute-force password cracker
that attempted every permutation of letters from an alphabet up to a specified
length.  The second application was a Work Queue application that coordinated
the workers running on different machines to execute the first program fast and
simultaneously so that the passwords could be cracked more efficiently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Canvas: Art Tools Program</title>
      <link>https://lplofchan.github.io/project/canvas/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lplofchan.github.io/project/canvas/</guid>
      <description>&lt;p&gt;As part of my Fundamentals of Computing I final project, my team and I decided
to essentially recreate the Microsoft application called paint.  Using C
programming, we created a GUI that allows the user to creatively explore on a
blank canvas.  There is a sidebar on the GUI that allows the user to choose
various painting tools and colors.&lt;/p&gt;

&lt;p&gt;As the final project of my first real Computer Science course, this was the
first time I actually used the skills that I learned in class to create
something new.  While this project seems quite simple to me now, it was the
first time I began to see what my coding could begin to accomplish.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>